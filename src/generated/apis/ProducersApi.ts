/* tslint:disable */
/* eslint-disable */
/**
 * Farm boys doc
 * Farm boys documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProducerDto,
  Producer,
  UpdateProducerDto,
} from '../models/index';
import {
    CreateProducerDtoFromJSON,
    CreateProducerDtoToJSON,
    ProducerFromJSON,
    ProducerToJSON,
    UpdateProducerDtoFromJSON,
    UpdateProducerDtoToJSON,
} from '../models/index';

export interface ProducersControllerCreateRequest {
    createProducerDto: CreateProducerDto;
}

export interface ProducersControllerFindOneRequest {
    id: string;
}

export interface ProducersControllerRemoveRequest {
    id: string;
}

export interface ProducersControllerUpdateRequest {
    id: string;
    updateProducerDto: UpdateProducerDto;
}

/**
 * 
 */
export class ProducersApi extends runtime.BaseAPI {

    /**
     * Create a new producer
     */
    async producersControllerCreateRaw(requestParameters: ProducersControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Producer>> {
        if (requestParameters['createProducerDto'] == null) {
            throw new runtime.RequiredError(
                'createProducerDto',
                'Required parameter "createProducerDto" was null or undefined when calling producersControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/producers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProducerDtoToJSON(requestParameters['createProducerDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProducerFromJSON(jsonValue));
    }

    /**
     * Create a new producer
     */
    async producersControllerCreate(requestParameters: ProducersControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Producer> {
        const response = await this.producersControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all producers
     */
    async producersControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Producer>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/producers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProducerFromJSON));
    }

    /**
     * Retrieve all producers
     */
    async producersControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Producer>> {
        const response = await this.producersControllerFindAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a producer by ID
     */
    async producersControllerFindOneRaw(requestParameters: ProducersControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Producer>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling producersControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/producers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProducerFromJSON(jsonValue));
    }

    /**
     * Retrieve a producer by ID
     */
    async producersControllerFindOne(requestParameters: ProducersControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Producer> {
        const response = await this.producersControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a producer by ID
     */
    async producersControllerRemoveRaw(requestParameters: ProducersControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling producersControllerRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/producers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a producer by ID
     */
    async producersControllerRemove(requestParameters: ProducersControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.producersControllerRemoveRaw(requestParameters, initOverrides);
    }

    /**
     * Update a producer by ID
     */
    async producersControllerUpdateRaw(requestParameters: ProducersControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Producer>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling producersControllerUpdate().'
            );
        }

        if (requestParameters['updateProducerDto'] == null) {
            throw new runtime.RequiredError(
                'updateProducerDto',
                'Required parameter "updateProducerDto" was null or undefined when calling producersControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/producers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProducerDtoToJSON(requestParameters['updateProducerDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProducerFromJSON(jsonValue));
    }

    /**
     * Update a producer by ID
     */
    async producersControllerUpdate(requestParameters: ProducersControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Producer> {
        const response = await this.producersControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
