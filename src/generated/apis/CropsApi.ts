/* tslint:disable */
/* eslint-disable */
/**
 * Farm boys doc
 * Farm boys documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateCropDto,
  Crop,
  UpdateCropDto,
} from '../models/index';
import {
    CreateCropDtoFromJSON,
    CreateCropDtoToJSON,
    CropFromJSON,
    CropToJSON,
    UpdateCropDtoFromJSON,
    UpdateCropDtoToJSON,
} from '../models/index';

export interface CropsControllerCreateRequest {
    createCropDto: CreateCropDto;
}

export interface CropsControllerFindOneRequest {
    id: string;
}

export interface CropsControllerRemoveRequest {
    id: string;
}

export interface CropsControllerUpdateRequest {
    id: string;
    updateCropDto: UpdateCropDto;
}

/**
 * 
 */
export class CropsApi extends runtime.BaseAPI {

    /**
     * Create a new crop
     */
    async cropsControllerCreateRaw(requestParameters: CropsControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Crop>> {
        if (requestParameters['createCropDto'] == null) {
            throw new runtime.RequiredError(
                'createCropDto',
                'Required parameter "createCropDto" was null or undefined when calling cropsControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/crops`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCropDtoToJSON(requestParameters['createCropDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CropFromJSON(jsonValue));
    }

    /**
     * Create a new crop
     */
    async cropsControllerCreate(requestParameters: CropsControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Crop> {
        const response = await this.cropsControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all crops
     */
    async cropsControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Crop>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/crops`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CropFromJSON));
    }

    /**
     * Retrieve all crops
     */
    async cropsControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Crop>> {
        const response = await this.cropsControllerFindAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a crop by ID
     */
    async cropsControllerFindOneRaw(requestParameters: CropsControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Crop>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling cropsControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/crops/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CropFromJSON(jsonValue));
    }

    /**
     * Retrieve a crop by ID
     */
    async cropsControllerFindOne(requestParameters: CropsControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Crop> {
        const response = await this.cropsControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a crop by ID
     */
    async cropsControllerRemoveRaw(requestParameters: CropsControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling cropsControllerRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/crops/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a crop by ID
     */
    async cropsControllerRemove(requestParameters: CropsControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cropsControllerRemoveRaw(requestParameters, initOverrides);
    }

    /**
     * Update a crop by ID
     */
    async cropsControllerUpdateRaw(requestParameters: CropsControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Crop>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling cropsControllerUpdate().'
            );
        }

        if (requestParameters['updateCropDto'] == null) {
            throw new runtime.RequiredError(
                'updateCropDto',
                'Required parameter "updateCropDto" was null or undefined when calling cropsControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/crops/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCropDtoToJSON(requestParameters['updateCropDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CropFromJSON(jsonValue));
    }

    /**
     * Update a crop by ID
     */
    async cropsControllerUpdate(requestParameters: CropsControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Crop> {
        const response = await this.cropsControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
