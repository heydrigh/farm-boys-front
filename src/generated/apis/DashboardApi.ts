/* tslint:disable */
/* eslint-disable */
/**
 * Farm boys doc
 * Farm boys documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FarmsByCropResponse,
  FarmsByStateResponse,
  LandUseDistributionResponse,
  TotalFarmAreaResponse,
  TotalFarmsResponse,
} from '../models/index';
import {
    FarmsByCropResponseFromJSON,
    FarmsByCropResponseToJSON,
    FarmsByStateResponseFromJSON,
    FarmsByStateResponseToJSON,
    LandUseDistributionResponseFromJSON,
    LandUseDistributionResponseToJSON,
    TotalFarmAreaResponseFromJSON,
    TotalFarmAreaResponseToJSON,
    TotalFarmsResponseFromJSON,
    TotalFarmsResponseToJSON,
} from '../models/index';

/**
 * 
 */
export class DashboardApi extends runtime.BaseAPI {

    /**
     * Get the count of farms grouped by crop type
     */
    async dashboardControllerGetFarmsByCropRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FarmsByCropResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/dashboard/farms-by-crop`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FarmsByCropResponseFromJSON));
    }

    /**
     * Get the count of farms grouped by crop type
     */
    async dashboardControllerGetFarmsByCrop(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FarmsByCropResponse>> {
        const response = await this.dashboardControllerGetFarmsByCropRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the count of farms grouped by state
     */
    async dashboardControllerGetFarmsByStateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FarmsByStateResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/dashboard/farms-by-state`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FarmsByStateResponseFromJSON));
    }

    /**
     * Get the count of farms grouped by state
     */
    async dashboardControllerGetFarmsByState(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FarmsByStateResponse>> {
        const response = await this.dashboardControllerGetFarmsByStateRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the distribution of land use areas
     */
    async dashboardControllerGetLandUseDistributionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LandUseDistributionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/dashboard/land-use-distribution`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LandUseDistributionResponseFromJSON(jsonValue));
    }

    /**
     * Get the distribution of land use areas
     */
    async dashboardControllerGetLandUseDistribution(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LandUseDistributionResponse> {
        const response = await this.dashboardControllerGetLandUseDistributionRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the total farm area in hectares
     */
    async dashboardControllerGetTotalFarmAreaRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TotalFarmAreaResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/dashboard/total-farm-area`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TotalFarmAreaResponseFromJSON(jsonValue));
    }

    /**
     * Get the total farm area in hectares
     */
    async dashboardControllerGetTotalFarmArea(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TotalFarmAreaResponse> {
        const response = await this.dashboardControllerGetTotalFarmAreaRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the total number of farms
     */
    async dashboardControllerGetTotalFarmsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TotalFarmsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/dashboard/total-farms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TotalFarmsResponseFromJSON(jsonValue));
    }

    /**
     * Get the total number of farms
     */
    async dashboardControllerGetTotalFarms(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TotalFarmsResponse> {
        const response = await this.dashboardControllerGetTotalFarmsRaw(initOverrides);
        return await response.value();
    }

}
